namespace Telerik.Windows.Controls.Docking
{
    using System;
    using System.Linq;
    using System.Windows;
    using System.Windows.Controls;
    using Telerik.Windows.Controls;

    public class DocumentHost : ContentControl, IThemable
    {
        private RadDocking docking;

        public DocumentHost()
        {
            base.DefaultStyleKey = typeof(DocumentHost);
            base.Loaded += new RoutedEventHandler(this.OnLoaded);
        }

        public void AddPane(RadPane pane)
        {
            RadPaneGroup group = this.GetGroup();
            pane.RemoveFromParent();
            group.Items.Add(pane);
        }

        public void AddSplitItem(ISplitItem itemToAdd)
        {
            foreach (RadPane pane in itemToAdd.EnumeratePanes().ToList<RadPane>())
            {
                pane.RemoveFromParent();
                this.AddPane(pane);
            }
        }

        private RadPaneGroup GetGroup()
        {
            RadSplitContainer container = base.Content as RadSplitContainer;
            RadPaneGroup group = null;
            if (container != null)
            {
                group = container.Items.OfType<RadPaneGroup>().FirstOrDefault<RadPaneGroup>();
            }
            else
            {
                if (this.docking != null)
                {
                    container = this.docking.GeneratedItemsFactory.CreateSplitContainer();
                }
                else
                {
                    container = new RadSplitContainer();
                }
                RadDocking.SetIsAutogenerated(container, true);
                ((IDocumentHostAware) container).IsInDocumentHost = true;
                base.Content = container;
            }
            if (group == null)
            {
                if (this.docking != null)
                {
                    group = this.docking.GeneratedItemsFactory.CreatePaneGroup();
                }
                else
                {
                    group = new RadPaneGroup();
                }
                RadDocking.SetIsAutogenerated(group, true);
                container.Items.Add(group);
            }
            return group;
        }

        protected override void OnContentChanged(object oldContent, object newContent)
        {
            DependencyObject oldContentDO = oldContent as DependencyObject;
            bool isAutoGenerated = (oldContentDO != null) && RadDocking.GetIsAutogenerated(oldContentDO);
            if ((this.docking != null) && (((this.docking.DocumentHost == oldContent) && isAutoGenerated) || (this.docking.DocumentHost == null)))
            {
                this.docking.DocumentHost = newContent as RadSplitContainer;
            }
            base.OnContentChanged(oldContent, newContent);
            IDocumentHostAware oldDocHostAware = oldContent as IDocumentHostAware;
            IDocumentHostAware newDocHostAware = newContent as IDocumentHostAware;
            if (oldDocHostAware != null)
            {
                oldDocHostAware.IsInDocumentHost = false;
            }
            if (newDocHostAware != null)
            {
                newDocHostAware.IsInDocumentHost = true;
            }
            DependencyObject contentAsDO = newContent as DependencyObject;
            if (contentAsDO != null)
            {
                contentAsDO.CopyValue(this, StyleManager.ThemeProperty);
            }
        }

        private void OnLoaded(object sender, RoutedEventArgs e)
        {
            this.docking = this.ParentOfType<RadDocking>();
        }

        public void ResetTheme()
        {
            DependencyObject contentAsDO = base.Content as DependencyObject;
            if (contentAsDO != null)
            {
                contentAsDO.CopyValue(this, StyleManager.ThemeProperty);
            }
        }
    }
}

