<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Jayrock.AgJson</name>
    </assembly>
    <members>
        <member name="T:Jayrock.Diagnostics.DebugString">
            <summary>
            This type supports the Jayrock infrastructure and is not intended to 
            be used directly from your code.
            </summary>
        </member>
        <member name="T:Jayrock.IndentedTextWriter">
            <summary>
            Drop-in replacement for <see cref="!:System.CodeDom.Compiler.IndentedTextWriter"/>
            that does not require a full-trust link and inheritance demand.
            </summary>
        </member>
        <member name="T:Jayrock.InternetDate">
            <summary>
            Provides date and time parsing according to the formats described in 
            RFC 822/1123 specification.
            </summary>
        </member>
        <member name="M:Jayrock.Json.BufferedCharReader.Back">
            <summary>
            Back up one character. This provides a sort of lookahead capability,
            so that one can test for a digit or letter before attempting to,
            for example, parse the next number or identifier.
            </summary>
            <remarks>
            This implementation currently does not support backing up more
            than a single character (the last read).
            </remarks>
        </member>
        <member name="M:Jayrock.Json.BufferedCharReader.More">
            <summary>
            Determine if the source string still contains characters that Next()
            can consume.
            </summary>
            <returns>true if not yet at the end of the source.</returns>
        </member>
        <member name="M:Jayrock.Json.BufferedCharReader.Next">
            <summary>
            Get the next character in the source string.
            </summary>
            <returns>The next character, or 0 if past the end of the source string.</returns>
        </member>
        <member name="T:Jayrock.Json.Conversion.IExporter">
            <summary>
            Defines the contract for exporting an object as JSON.
            </summary>
        </member>
        <member name="T:Jayrock.Json.Conversion.Converters.DateTimeExporter">
            <remarks>
            See <a href="http://www.w3.org/TR/NOTE-datetime">W3C note on date 
            and time formats</a>.
            </remarks>
        </member>
        <member name="T:Jayrock.Json.Conversion.IJsonExportable">
            <summary>
            This interface allows objects to provide their own implementation for
            exporting as JSON.
            </summary>
        </member>
        <member name="T:Jayrock.Json.Conversion.IJsonImportable">
            <summary>
            This interface allows objects to provide their own implementation for
            exporting as JSON.
            </summary>
        </member>
        <member name="T:Jayrock.Json.Conversion.JsonConvert">
            <summary>
            Provides methods for converting between Common Language Runtime 
            (CLR) types and JSON types.
            </summary>
        </member>
        <member name="T:Jayrock.Json.Conversion.JsonIgnoreAttribute">
            <summary>
            Instructs a JSON serializer not to write out the value of a public field
            or property.
            </summary>
        </member>
        <member name="T:Jayrock.Json.JsonWriterBase">
            <summary>
            Base implementation of <see cref="T:Jayrock.Json.JsonWriter"/> that can be used
            as a starting point for sub-classes of <see cref="T:Jayrock.Json.JsonWriter"/>.
            </summary>
        </member>
        <member name="T:Jayrock.Json.JsonWriter">
            <summary>
            Represents a writer that provides a fast, non-cached, forward-only means of 
            emitting JSON data.
            </summary>
        </member>
        <member name="M:Jayrock.Json.JsonWriter.WriteStartObject">
            <summary>
            When overridden in a derived class, writes out the start of a 
            JSON object.
            </summary>
        </member>
        <member name="M:Jayrock.Json.JsonWriter.WriteEndObject">
            <summary>
            When overridden in a derived class, writes out the end of a 
            JSON object.
            </summary>
        </member>
        <member name="M:Jayrock.Json.JsonWriter.WriteMember(System.String)">
            <summary>
            When overridden in a derived class, writes out an object
            member (but not its value).
            </summary>
        </member>
        <member name="M:Jayrock.Json.JsonWriter.WriteStartArray">
            <summary>
            When overridden in a derived class, writes out the start of a 
            JSON array.
            </summary>
        </member>
        <member name="M:Jayrock.Json.JsonWriter.WriteEndArray">
            <summary>
            When overridden in a derived class, writes out the end of a 
            JSON array.
            </summary>
        </member>
        <member name="M:Jayrock.Json.JsonWriter.WriteString(System.String)">
            <summary>
            When overridden in a derived class, writes out a JSON string 
            value.
            </summary>
        </member>
        <member name="M:Jayrock.Json.JsonWriter.WriteNumber(System.String)">
            <summary>
            When overridden in a derived class, writes out a JSON number 
            value.
            </summary>
        </member>
        <member name="M:Jayrock.Json.JsonWriter.WriteBoolean(System.Boolean)">
            <summary>
            When overridden in a derived class, writes out a JSON boolean 
            value.
            </summary>
        </member>
        <member name="M:Jayrock.Json.JsonWriter.WriteNull">
            <summary>
            When overridden in a derived class, writes out the JSON null
            value.
            </summary>
        </member>
        <member name="M:Jayrock.Json.JsonWriter.Flush">
            <summary>
            When overridden in a derived class, flushes whatever is in the 
            buffer to the underlying streams and also flushes the 
            underlying stream. The default implementation does nothing.
            </summary>
        </member>
        <member name="M:Jayrock.Json.JsonWriter.Close">
            <summary>
            Closes the writer and releases any underlying resources 
            associated with the writer.
            </summary>
        </member>
        <member name="M:Jayrock.Json.JsonWriter.WriteNumber(System.Byte)">
            <summary>
            Writes a JSON number from a <see cref="T:System.Byte"/> value.
            </summary>
        </member>
        <member name="M:Jayrock.Json.JsonWriter.WriteNumber(System.Int16)">
            <summary>
            Writes a JSON number from an <see cref="T:System.Int16"/> value.
            </summary>
        </member>
        <member name="M:Jayrock.Json.JsonWriter.WriteNumber(System.Int32)">
            <summary>
            Writes a JSON number from an <see cref="T:System.Int32"/> value.
            </summary>
        </member>
        <member name="M:Jayrock.Json.JsonWriter.WriteNumber(System.Int64)">
            <summary>
            Writes a JSON number from an <see cref="T:System.Int64"/> value.
            </summary>
        </member>
        <member name="M:Jayrock.Json.JsonWriter.WriteNumber(System.Decimal)">
            <summary>
            Writes a JSON number from a <see cref="T:System.Decimal"/> value.
            </summary>
        </member>
        <member name="M:Jayrock.Json.JsonWriter.WriteNumber(System.Single)">
            <summary>
            Writes a JSON number from a <see cref="T:System.Single"/> value.
            </summary>
        </member>
        <member name="M:Jayrock.Json.JsonWriter.WriteNumber(System.Double)">
            <summary>
            Writes a JSON number from a <see cref="T:System.Double"/> value.
            </summary>
        </member>
        <member name="M:Jayrock.Json.JsonWriter.WriteStringArray(System.Collections.IEnumerable)">
            <summary>
            Writes a JSON array of JSON strings given an enumerable source
            of arbitrary <see cref="T:System.Object"/> values.
            </summary>
        </member>
        <member name="M:Jayrock.Json.JsonWriter.WriteStringArray(System.String[])">
            <summary>
            Writes a JSON array of JSON strings given an array of 
            <see cref="T:System.String"/> values.
            </summary>
        </member>
        <member name="M:Jayrock.Json.JsonWriter.WriteFromReader(Jayrock.Json.JsonReader)">
            <summary>
            Writes the next value from the given <see cref="T:Jayrock.Json.JsonReader"/>
            into this writer's output. If the reader is positioned
            at the root of JSON data, then the entire data will be
            written.
            </summary>
        </member>
        <member name="P:Jayrock.Json.JsonWriter.Depth">
            <summary>
            Return the current level of nesting as the writer encounters
            nested objects and arrays.
            </summary>
        </member>
        <member name="P:Jayrock.Json.JsonWriter.Index">
            <summary>
            Return the current index within a JSON Array 
            (also valid for a JSON Object but indicates member count).
            </summary>
        </member>
        <member name="P:Jayrock.Json.JsonWriter.Bracket">
            <summary>
            Determines the current bracket of the writer.
            </summary>
        </member>
        <member name="E:Jayrock.Json.JsonWriter.Disposed">
            <summary>
            Represents the method that handles the Disposed event of a reader.
            </summary>
        </member>
        <member name="T:Jayrock.Json.JsonArray">
            <summary>
            An ordered sequence of values. This class also provides a number of
            methods that can be found on a JavaScript Array for sake of parity.
            </summary>
            <remarks>
            <para>
            Public Domain 2002 JSON.org, ported to C# by Are Bjolseth (teleplan.no)
            and re-adapted by Atif Aziz (www.raboof.com)</para>
            </remarks>
        </member>
        <member name="M:Jayrock.Json.JsonArray.ToString">
            <summary>
            Make an JSON external form string of this JsonArray. For
            compactness, no unnecessary whitespace is added.
            </summary>
            <remarks>
            This method assumes that the data structure is acyclical.
            </remarks>
        </member>
        <member name="M:Jayrock.Json.JsonArray.Export(Jayrock.Json.JsonWriter)">
            <summary>
            Make an JSON external form string of this JsonArray. For
            compactness, no unnecessary whitespace is added.
            </summary>
            <remarks>
            This method assumes that the data structure is acyclical.
            </remarks>
        </member>
        <member name="M:Jayrock.Json.JsonArray.ToArray">
            <summary>
            Copies the elements to a new object array.
            </summary>
        </member>
        <member name="M:Jayrock.Json.JsonArray.ToArray(System.Type)">
            <summary>
            Copies the elements to a new array of the specified type.
            </summary>
        </member>
        <member name="M:Jayrock.Json.JsonArray.Push(System.Object)">
            <summary>
            Appends new elements to an array.
            </summary>
            <returns>
            The new length of the array.
            </returns>
            <remarks>
            This method appends elements in the order in which they appear. If
            one of the arguments is an array, it is added as a single element.
            Use the <see cref="M:Jayrock.Json.JsonArray.Concat(System.Object[])"/> method to join the elements from two or
            more arrays.
            </remarks>
        </member>
        <member name="M:Jayrock.Json.JsonArray.Push(System.Object[])">
            <summary>
            Appends new elements to an array.
            </summary>
            <returns>
            The new length of the array.
            </returns>
            <remarks>
            This method appends elements in the order in which they appear. If
            one of the arguments is an array, it is added as a single element.
            Use the <see cref="M:Jayrock.Json.JsonArray.Concat(System.Object[])"/> method to join the elements from two or
            more arrays.
            </remarks>
        </member>
        <member name="M:Jayrock.Json.JsonArray.Pop">
            <summary>
            Removes the last element from an array and returns it.
            </summary>
            <remarks>
            If the array is empty, null is returned.
            </remarks>
        </member>
        <member name="M:Jayrock.Json.JsonArray.Concat(System.Object[])">
            <summary>
            Returns a new array consisting of a combination of two or more
            arrays.
            </summary>
        </member>
        <member name="M:Jayrock.Json.JsonArray.Shift">
            <summary>
            Removes the first element from an array and returns it.
            </summary>
        </member>
        <member name="M:Jayrock.Json.JsonArray.Unshift(System.Object)">
            <summary>
            Returns an array with specified elements inserted at the beginning.
            </summary>
            <remarks>
            The unshift method inserts elements into the start of an array, so
            they appear in the same order in which they appear in the argument
            list.
            </remarks>
        </member>
        <member name="M:Jayrock.Json.JsonArray.Unshift(System.Object[])">
            <summary>
            Returns an array with specified elements inserted at the beginning.
            </summary>
            <remarks>
            The unshift method inserts elements into the start of an array, so
            they appear in the same order in which they appear in the argument
            list.
            </remarks>
        </member>
        <member name="T:Jayrock.Json.JsonNull">
            <summary>
            Represent the one and only representation of the "null" value in JSON.
            </summary>
        </member>
        <member name="T:Jayrock.Json.JsonNumber">
            <summary> 
            Represents a JSON Number.  This class models a number as a string 
            and only converts to a native numerical representation when needed 
            and therefore told.  
            </summary>
            <remarks>
            This class cannot be used to compare two numbers or perform
            mathematical operations like addition and substraction without 
            first converting to an actual native numerical data type.
            Use <see cref="M:Jayrock.Json.JsonNumber.LogicallyEquals(System.Object)"/> to test for equality.
            </remarks>
        </member>
        <member name="T:Jayrock.Json.JsonObject">
            <summary>
            An unordered collection of name/value pairs.
            </summary>
            <remarks>
            <para>
            Althought the collection should be considered unordered by the user, 
            the implementation does internally try to remember the order in which 
            the keys were added in order facilitate human-readability as in when
            an instance is rendered as text.</para>
            <para>
            Public Domain 2002 JSON.org, ported to C# by Are Bjolseth (teleplan.no)
            and re-adapted by Atif Aziz (www.raboof.com)</para>
            </remarks>
        </member>
        <member name="M:Jayrock.Json.JsonObject.#ctor(System.Collections.IDictionary)">
            <summary>
            Construct a JObject from a IDictionary
            </summary>
        </member>
        <member name="M:Jayrock.Json.JsonObject.Accumulate(System.String,System.Object)">
            <summary>
            Accumulate values under a key. It is similar to the Put method except
            that if there is already an object stored under the key then a
            JArray is stored under the key to hold all of the accumulated values.
            If there is already a JArray, then the new value is appended to it.
            In contrast, the Put method replaces the previous value.
            </summary>
        </member>
        <member name="M:Jayrock.Json.JsonObject.Put(System.String,System.Object)">
            <summary>
            Put a key/value pair in the JObject. If the value is null,
            then the key will be removed from the JObject if it is present.
            </summary>
        </member>
        <member name="M:Jayrock.Json.JsonObject.GetNamesArray">
            <summary>
            Produce a JArray containing the names of the elements of this
            JObject.
            </summary>
        </member>
        <member name="M:Jayrock.Json.JsonObject.ToString">
            <summary>
            Overridden to return a JSON formatted object as a string.
            </summary>
        </member>
        <member name="M:Jayrock.Json.JsonObject.Import(Jayrock.Json.JsonReader)">
            <remarks>
            This method is not exception-safe. If an error occurs while 
            reading then the object may be partially imported.
            </remarks>
        </member>
        <member name="T:Jayrock.Json.JsonReader">
            <summary>
            Represents a reader that provides fast, non-cached, forward-only 
            access to JSON data. 
            </summary>
        </member>
        <member name="M:Jayrock.Json.JsonReader.Read">
            <summary>
            Reads the next token and returns true if one was found.
            </summary>
        </member>
        <member name="M:Jayrock.Json.JsonReader.Close">
            <summary>
            Closes the reader and releases any underlying resources 
            associated with the reader.
            </summary>
        </member>
        <member name="M:Jayrock.Json.JsonReader.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the state of the 
            instance.
            </summary>
        </member>
        <member name="M:Jayrock.Json.JsonReader.ReadToken(Jayrock.Json.JsonTokenClass)">
            <summary>
            Reads the next token ensuring that it matches the specified 
            token. If not, an exception is thrown.
            </summary>
        </member>
        <member name="M:Jayrock.Json.JsonReader.ReadString">
            <summary>
            Reads the next token, ensures it is a String and returns its 
            text. If the next token is not a String, then an exception
            is thrown instead.
            </summary>
        </member>
        <member name="M:Jayrock.Json.JsonReader.ReadBoolean">
            <summary>
            Reads the next token, ensures it is a Boolean and returns its 
            value. If the next token is not a Boolean, then an exception 
            is thrown instead.
            </summary>
        </member>
        <member name="M:Jayrock.Json.JsonReader.ReadNumber">
            <summary>
            Reads the next token, ensures it is a Number and returns its 
            text representation. If the next token is not a Number, then 
            an exception is thrown instead.
            </summary>
        </member>
        <member name="M:Jayrock.Json.JsonReader.ReadNull">
            <summary>
            Reads the next token, ensures it is a Null. If the next token 
            is not a Null, then an exception is thrown instead.
            </summary>
        </member>
        <member name="M:Jayrock.Json.JsonReader.ReadMember">
            <summary>
            Reads the next token, ensures it is Member (of an object) and 
            returns its text. If the next token is not a Member, then an 
            exception is thrown instead.
            </summary>
        </member>
        <member name="M:Jayrock.Json.JsonReader.StepOut">
            <summary>
            Steps out of the current depth to the level immediately above. 
            Usually this skips the current Object or Array being read, 
            including all nested structures.
            </summary>
        </member>
        <member name="M:Jayrock.Json.JsonReader.Skip">
            <summary>
            Skips through the next item. If it is an Object or Array, then
            the entire object or array is skipped. If it is a scalar value
            then just that value is skipped. If the reader is on an object
            member then the member and its value is skipped.
            </summary>
        </member>
        <member name="M:Jayrock.Json.JsonReader.MoveToContent">
            <summary>
            Ensures that the reader is positioned on content (a JSON value) 
            ready to be read. If the reader is already aligned on the start
            of a value then no further action is taken.
            </summary>
            <returns>Return true if content was found. Otherwise false to 
            indicate EOF.</returns>
        </member>
        <member name="P:Jayrock.Json.JsonReader.Token">
            <summary>
            Gets the current token.
            </summary>
        </member>
        <member name="P:Jayrock.Json.JsonReader.TokenClass">
            <summary>
            Gets the class of the current token.
            </summary>
        </member>
        <member name="P:Jayrock.Json.JsonReader.Text">
            <summary>
            Gets the text of the current token.
            </summary>
        </member>
        <member name="P:Jayrock.Json.JsonReader.Depth">
            <summary>
            Return the current level of nesting as the reader encounters
            nested objects and arrays.
            </summary>
        </member>
        <member name="P:Jayrock.Json.JsonReader.EOF">
            <summary>
            Indicates whether the reader has reached the end of input source.
            </summary>
        </member>
        <member name="E:Jayrock.Json.JsonReader.Disposed">
            <summary>
            Represents the method that handles the Disposed event of a reader.
            </summary>
        </member>
        <member name="T:Jayrock.Json.JsonReaderBase">
            <summary>
            Base implementation of <see cref="T:Jayrock.Json.JsonReader"/> that can be used
            as a starting point for sub-classes of <see cref="T:Jayrock.Json.JsonReader"/>.
            </summary>
        </member>
        <member name="M:Jayrock.Json.JsonReaderBase.Read">
            <summary>
            Reads the next token and returns true if one was found.
            </summary>
        </member>
        <member name="M:Jayrock.Json.JsonReaderBase.ReadTokenImpl">
            <summary>
            Reads the next token and returns it.
            </summary>
        </member>
        <member name="P:Jayrock.Json.JsonReaderBase.Token">
            <summary>
            Gets the current token.
            </summary>
        </member>
        <member name="P:Jayrock.Json.JsonReaderBase.Depth">
            <summary>
            Return the current level of nesting as the reader encounters
            nested objects and arrays.
            </summary>
        </member>
        <member name="M:Jayrock.Json.JsonString.Enquote(System.String)">
            <summary>
            Produces a string in double quotes with backslash sequences in all
            the right places.
            </summary>
            <returns>A correctly formatted string for insertion in a JSON
            message.
            </returns>
            <remarks>
            Public Domain 2002 JSON.org, ported to C# by Are Bjolseth
            (teleplan.no) and nearly re-written by Atif Aziz (www.raboof.com)
            </remarks>
        </member>
        <member name="M:Jayrock.Json.JsonString.Dequote(Jayrock.Json.BufferedCharReader,System.Char)">
            <summary>
            Return the characters up to the next close quote character.
            Backslash processing is done. The formal JSON format does not
            allow strings in single quotes, but an implementation is allowed to
            accept them.
            </summary>
            <param name="quote">The quoting character, either " or '</param>
            <returns>A String.</returns>
        </member>
        <member name="M:Jayrock.Json.JsonString.ParseHex(Jayrock.Json.BufferedCharReader,System.Char[])">
            <summary>
            Eats the next four characters, assuming hex digits, and converts
            into the represented character value.
            </summary>
            <returns>The parsed character.</returns>
        </member>
        <member name="T:Jayrock.Json.JsonTextReader">
            <summary>
            Represents a reader that provides fast, non-cached, forward-only 
            access to JSON data over JSON text (RFC 4627). 
            </summary>
        </member>
        <member name="M:Jayrock.Json.JsonTextReader.ReadTokenImpl">
            <summary>
            Reads the next token and returns it.
            </summary>
        </member>
        <member name="M:Jayrock.Json.JsonTextReader.Parse">
            <summary>
            Parses the next token from the input and returns it.
            </summary>
        </member>
        <member name="M:Jayrock.Json.JsonTextReader.ParseArray">
            <summary>
            Parses expecting an array in the source.
            </summary>
        </member>
        <member name="M:Jayrock.Json.JsonTextReader.ParseArrayFirst">
            <summary>
            Parses the first element of an array or the end of the array if
            it is empty.
            </summary>
        </member>
        <member name="M:Jayrock.Json.JsonTextReader.ParseArrayNext">
            <summary>
            Parses the next element in the array.
            </summary>
        </member>
        <member name="M:Jayrock.Json.JsonTextReader.ParseObject">
            <summary>
            Parses expecting an object in the source.
            </summary>
        </member>
        <member name="M:Jayrock.Json.JsonTextReader.ParseObjectMember">
            <summary>
            Parses the first member name of the object or the end of the array
            in case of an empty object.
            </summary>
        </member>
        <member name="M:Jayrock.Json.JsonTextReader.Yield(Jayrock.Json.JsonToken)">
            <summary> 
            Yields control back to the reader's user while updating the
            reader with the new found token and its text.
            </summary>
        </member>
        <member name="M:Jayrock.Json.JsonTextReader.Yield(Jayrock.Json.JsonToken,Jayrock.Json.JsonTextReader.Continuation)">
            <summary> 
            Yields control back to the reader's user while updating the
            reader with the new found token, its text and the next 
            continuation point into the reader.
            </summary>
            <remarks>
            By itself, this method cannot affect the stack such tha control 
            is returned back to the reader's user. This must be done by 
            Yield's caller by way of explicit return.
            </remarks>
        </member>
        <member name="M:Jayrock.Json.JsonTextReader.NextClean">
            <summary>
            Get the next char in the string, skipping whitespace
            and comments (slashslash and slashstar).
            </summary>
            <returns>A character, or 0 if there are no more characters.</returns>
        </member>
        <member name="T:Jayrock.Json.JsonTextWriter">
            <summary>
            Represents a writer that provides a fast, non-cached, forward-only means of 
            emitting JSON data formatted as JSON text (RFC 4627).
            </summary>
        </member>
        <member name="P:Jayrock.Json.JsonToken.Class">
            <summary>
            Gets the class/type/category of the token.
            </summary>
        </member>
        <member name="P:Jayrock.Json.JsonToken.Text">
            <summary>
            Gets the current token text, if applicable, otherwise null.
            </summary>
        </member>
        <member name="T:Jayrock.Mask">
            <summary>
            Provides masking services where one value masks another given a test.
            </summary>
        </member>
        <member name="M:Jayrock.UnixTime.ToDateTime(System.Int64)">
            <summary>
            Converts a 64-bit Unix time (UTC) into a DateTime instance that
            represents the same time in local time.
            </summary>
            <remarks>
            See <a href="http://en.wikipedia.org/wiki/Unix_time">Unix time on Wikipedia</a>
            for more information.
            </remarks>
        </member>
        <member name="M:Jayrock.UnixTime.IsLeapYear(System.Int32)">
            <summary>
            Determine if a given year, expressed as the number of years since
            1900, is a leap year.
            </summary>
        </member>
        <member name="M:Jayrock.UnixTime.ElapsedLeapYears(System.Int32)">
            <summary>
            Number of leap years from 1970 up to, but not including, 
            the specified year expressed as the number of years since 1900.
            </summary>
        </member>
    </members>
</doc>
